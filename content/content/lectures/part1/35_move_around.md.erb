---
title: "How do mobile Robots move?"
desc: Wheels, legs and other ways for robots to move around 3D space
homework: week4
slides: true
---
<%= include_topic :effect %>

#### Steering Wheeled vehicles

##### Our goal
* Focusing for now on autonomous, ground based mobile robots. But principles apply
* Software needs to be able to command the robot
* Consider micro and macro
  * Steer from Waltham to Boston
  * Steer from Shapiro to Usdan
  * Stay in a lane
  * Drive in a straight road
  * Turn a corner
  * Make a 90 degree turn
  * Simply drive in a straight line
<%= discussion_box "Lets take each of these in turn. "%>
* At the micro level:
  * Move at x Meters/second
  * Turn at 10 degrees/second
 <%= discussion_box "Lets take each of these in turn. "%>
 
##### Steering for wheeled vehicles
* Degrees of freedom
    * Train? 
    * Baseball?
    * Drone?
    * Car?
    * Tank?
* Holonomic vs. Non-
    * Holonomic means able to move in all possible dimensions
    * Non-holonomic means that it cannot do this

##### Mobile Robots
* Motors drive Wheels
  * Differential Drive
  * Tri-cycle vehicle
  * [Ackermann Steering](https://en.wikipedia.org/wiki/Ackermann_steering_geometry)
  * Articulated Vehicle
  * There are more

* "Differential drive"
  * Steering is achieved by driving wheels at different speeds
  * Geometry calculations to determine what delta rpm leads to what kind of turn
  * Usually three wheels, two with motors, one "caster"
* Tri-cycle steering
  * Two fixed Wheels
  * A third wheel with a steerable mount
* Ackerman Steering
  * Where the steering is achieved by actual rotation of the wheel mount
  * Note subtle difference from parallel steering
* Articulated Vehicle
  * Where the vehicle itself has a pivot point
* Notice that to steer the vehicle an algorithm needs to convert the desired rotation to proportional wheel spinning (we won't get into the geometry calculations.)

#### Firmware
* Software and hardware architecture
* cmd_vel: needs to convert from high level units to motor commands
* odom: needs to convert from sensors (motor decoder and others) into coordinates
* Big deal is being aware of known errors from the manufacturer
* We wont go into the detailed geometry and math but it is very well studied and understood
* Our motors are Robotis Dynamixel. These seem super common.
* [Dynamixel Spec Sheet](http://emanual.robotis.com/docs/en/dxl/x/xl430-w250/)

##### Other scenarios
* Tracked vehicles (tanks)
* Water surface vehicles
* Under water vehicles
* Aerial vehicles

#### Terrain
* Indoor vs. outdoor
  * Traction and slippage
  * Weather effects - wet, dry, light, dark
* Inclines and declines
  * Needs more force
  * Also affects levelness
  * Direction that cameras and sensors are pointed 

#### Sensors
* The role of sensors in controlling motion
* Self-sensors (like odometry)
* External sensors (like LIDAR)
* Our Robotis TB3 Burger uses [HLS-LFCD2](https://dabit.industries/products/360-laser-distance-sensor-lds-01-lidar)
* Review of dead reckoning
* Review of "real robots don't drive straight"

##### Work in groups
* How would you get your robot to drive in a perfect 1 meter square?

#### Next Class
* Look at homework: <%= link_to_next_lecture %>