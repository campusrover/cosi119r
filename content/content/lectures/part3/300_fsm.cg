---
title: Finite State Machines
desc: How to give robots intelligent behavior
slides: true
---
* **Reading: :topic_link :hw_119_prr10_3**

*Reminder: Readings are your responsibility. You will be expected to come to class prepared, having read the material, and ready to participate in the discussion*

:h2 Logistics

* What is move_base?
    * Using the map and the current estimated position (AMCL)
    * Plan a route to a destination, avoiding obstacles
* Why is an estimate needed?
    * Purely for AMCL
    * Not related to navigation
* 2D Destination?
    * Why not 3D, after all Gazebo is a 3D world
    

:slide_bigtitle What do we mean by Complex Behavior?

* Obey a high level goal by creating subgoals, and responding to real time events
* `move_base` behaviors are pretty complex
* A lot can be learned from Computer Games and the behavior of "Non Player Characters"
* Obviously an open ended question with many different approaches

:discussion "Which teams have an example of requiring "complex behavior", or of apparent 'inteligence'. What were you planning to do?"

:slide_title Example scenario

* Lets say we want to implement the following "complex behavior":

If Robot is stuck, then try the following, one after the other until the robot is unstuck: a) Conservative reset; b) clearing rotation; c) aggressive reset; d) clearing rotation. If after all of those the robot is still stuck, then abort the navigation

:discussion "How would you implement that?"

:slide_title Introduction to Finite State Machines

* [Finite Sate Machines](https://en.wikipedia.org/wiki/Finite-state_machine) also known as FSA - Finite State Automata or Deterministic Finite State Automata
* Basic and very useful way to control behaviors
* And with lots of other applications! (See Regular Expressions and Cosi 130A)
* You have seen it before, whether you identified it as an FSM or not`

:slide_title Essential features:

1. Named nodes, corresponding to states
1. Edges connecting nodes, corresponding to "inputs"
1. Initial, Final and current states

:slide_title Algorithm
1. Start in the initial state
1. Receive an input
1. Follow the one edge out of that state, given that input
1. Repeat until you get to final state

:callout :small, "Notice", "Depending on the scenario, the states, transitions and inputs can be very different."

:slide_title Example of a real world FSM used in ROS

:image :recovery_behaviors

:slide_title Implementations

* So simple that you don't really need a package 
* But one part of the diagram can't be implemented as a basic FSM
* We can either modify it or use a more fancy kind of finite state machine

:discussion "Can you tell what the error is in the diagram (I didn't notice it before I actually went to implement it)"

:slide_title Using `transitions` python package

* You can decide whether you want to use a package or not
* My favorite package is: [pytransitions](https://github.com/pytransitions/transitions)
* And an implementation of the above FSM with pytransitions in `samples` fsm_example.py

:discussion "What are the tradeoffs in using a package or not?"

:slide_title Move Base as a Finite State Machine

:image :fsm_example

:slide_title For further study

* [Finite State Machine in Python](https://www.python-course.eu/finite_state_machine.php)

:topic_include :sample_robotics_challenges



