---
title: Using Sensors via ROS
desc: How do we use sensor data to actually do something useful?
homework: ; 1) Read Chapter 7 of PRR; 2) Answer intuition questions; 3) Read and comment on Wall Following paper
cat: fundamentals
---
<%= homework_hdr %>

1. <%= partbadge %> **Read**: Read Chapter 7 of PRR and remember to refer to <%= link_to_topic :wander_bot %> as you try to understand and test out the code. Believe me you won't really understand the chapter until you get the code to run! Consider the following warmup questions:
    1. As we are talking about sensors, thonl about this: In the Red Light! Green Light! program what plays the role of a sensor?
    1. This is tricky: the formula on page 104: `bearing = msg.angle_min + i * msg.angle_max / len(msg.ranges)` is incorrect (i.e. it's an error in the book!) What is the correct formula, or what is the error?
    1. In Wander-bot, where is the code that assures that the robot doesn't run into a wall when it is wandering? What line(s).
    1. Please write one or two things that are still confusing to you; if it's all clear, then please write one or two major takeaways.
    <%= deliverable "Your responses to the above questions, in brief, in a pdf with your name and homework number at the top." %>
1. <%= pdfbadge %> **Lidar**: I want you to use your intuition and your knowledge of geometry. Try to understand the data that comes from the LIDAR. You can think of them as "rays" that go in all directions. The data you get back is an array of distances to the first obstacle. Using words, diagrams and/or pseudo code, try and answer:
    * Given a single LIDAR sensor how would you detect that you are about the crash into a wall?
    * How would you compute the angle at which you are approaching the wall?
    <%= deliverable "Submit your response as a pdf. Points off for a superficial answer." %>
2. <%= partbadge %> <%= pdfbadge %> **Read**: [Wall Following Algorithms Paper](https://github.com/ssscassio/ros-wall-follower-2-wheeled-robot/blob/master/report/Wall-following-algorithm-for-reactive%20autonomous-mobile-robot-with-laser-scanner-sensor.pdf). Write up what your major takeaways are from this paper. <%= deliverable "1 page max pdf writeup" %>

#### Discussion
* Lets talk over your answers to the homework questions
* Requested workshops: #1 is running your code on an actual robot
* How to deliver this?
* New OH times
* Discussion of the pace of the course so far. Fast? Slow? 
* Grading is happening
* Show projects area being developed


#### Review - how it works in ROS
* All your code (almost) in ROS is a node
* All information (almost) is transferred in the form of messages
* Sensors
  * Are electronic devices
  * Wired to the built in computer
  * In the case of the TB3, wired to the Arduino
  * Code on the Arduino read the i/o and participate as a node in ROS
  * Publishing information
* ROS info required
  * What is the "topic" that the device publishes to
  * How frequently does it publish (e.g. 10 times per second, once every second)
  * And what is the message type
* Acting on the sensor data
  * A node subscribes to that topic
  * Writes a "handler" which is invoked each time the sensor node publishes
* Simulation and IRL are different
  * Sensor's specifications are different (subtly)
  * Ranges and what happens when out of range
  * Degree of "randomness"
  * Exact dimensions of robots, obstacles, etc.


<%= include_topic :wander_bot %>

#### Example - Simple "Roomba" pattern

Roomba is iRobot's robotic vacuum cleaner. It seems to just drive forward until it gets to a wall and then turn some amount and then continue. We want to think through a simplistic version of this pattern.

##### Design
* Loop forever
    * While there a wall ahead
        * Rotate in place
    * Move forward until there's a wall ahead 

##### Discussion about this approach
* What questions need to be answered?
* Wil it work?

##### Lets look at some code that uses sensors
* `prrexamples/pid_driver4.py`
* `prrexamples/pid_range.py`

#### Next Class
* Look at homework: <%= link_to_next_lecture %>